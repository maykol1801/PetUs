const express = require('express');
const sql = require('mssql');
const cors = require('cors');

const app = express();

app.use(express.json());
app.use(cors());

// Configuración de conexión a SQL Server
const config = {
    user: 'petus_user', // Tu usuario de SQL Server
    password: 'petus1234', // Contraseña de tu usuario
    server: 'localhost', // Dirección del servidor
    database: 'petus', // Nombre de la base de datos
    options: {
        encrypt: false, // Cambia a `true` si usas SSL
        trustServerCertificate: true, // Necesario para entornos de desarrollo
    }
};

// Crear un pool de conexión global
let pool;

sql.connect(config)
    .then((p) => {
        pool = p;
        console.log('Conexión exitosa con la base de datos.');
    })
    .catch((err) => {
        console.error('Error al conectar a la base de datos:', err);
    });

// Ruta para registro
app.post("/api/register", async (req, res) => {
  const {
    nombre,
    nombre_usuario,
    descripcion = null,
    fecha_nacimiento,
    email,
    contraseña,
    telefono = null,
  } = req.body;

  try {
    const pool = await sql.connect(dbConfig);

    // Verificar si el correo ya existe
    const emailCheck = await pool
      .request()
      .input("email", sql.VarChar, email)
      .query("SELECT * FROM usuarios WHERE email = @email");

    if (emailCheck.recordset.length > 0) {
      return res.status(400).send({ message: "El correo ya está en uso." });
    }

    // Verificar si el nombre de usuario ya existe
    const usernameCheck = await pool
      .request()
      .input("nombre_usuario", sql.VarChar, nombre_usuario)
      .query("SELECT * FROM usuarios WHERE nombre_usuario = @nombre_usuario");

    if (usernameCheck.recordset.length > 0) {
      return res
        .status(400)
        .send({ message: "El nombre de usuario ya está en uso." });
    }

    // Insertar nuevo usuario
    await pool
      .request()
      .input("nombre", sql.VarChar, nombre)
      .input("nombre_usuario", sql.VarChar, nombre_usuario)
      .input("descripcion", sql.Text, descripcion)
      .input("fecha_nacimiento", sql.Date, fecha_nacimiento)
      .input("email", sql.VarChar, email)
      .input("contraseña", sql.VarChar, contraseña)
      .input("telefono", sql.VarChar, telefono)
      .query(
        `INSERT INTO usuarios 
         (nombre, nombre_usuario, descripcion, fecha_nacimiento, email, contraseña, telefono) 
         VALUES (@nombre, @nombre_usuario, @descripcion, @fecha_nacimiento, @email, @contraseña, @telefono)`
      );

    res.status(201).send({ message: "Usuario registrado con éxito." });
  } catch (error) {
    console.error("Error al conectar con la base de datos:", error);
    res.status(500).send({ message: "Error en el servidor." });
  }
});

// Configuración del puerto
const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Servidor de registro corriendo en http://localhost:${PORT}`);
});
